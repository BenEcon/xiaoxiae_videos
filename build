#!/bin/python3

"""A script for building all of the files to be put together."""
import subprocess
import shutil
import os

video_directory = "video"

import argparse
import datetime
import os


parser = argparse.ArgumentParser(
    description="A script for building files for the video."
)

parser.add_argument(
    "-s", "--scene",
    help="the name of the scene to build; builds all when omitted",
    default=None,
)

parser.add_argument(
    "-n", "--no-manim",
    dest="no_manim",
    action="store_true",
    help="don't actually run Manim, just do the video post-processing",
    default=False,
)

parser.add_argument(
    "-q", "--quality",
    choices=["l", "m", "h", "k"],
    default="k",
    help="the quality of the video (k=4K by default)"
)

# licenses (to give as options)
os.chdir(os.path.dirname(os.path.abspath(__file__)))

# get the parser and parse the commands
arguments = parser.parse_args()

# (possibly) call Manim
if not arguments.no_manim:
    if arguments.scene is None:
        if os.path.exists(video_directory):
            shutil.rmtree(video_directory)

        subprocess.Popen(["python3", "-m", "manim", "scenes.py", f"-aq{arguments.quality}"]).communicate()
    else:
        subprocess.Popen(["python3", "-m", "manim", "scenes.py", f"-q{arguments.quality}", arguments.scene]).communicate()

# rename to [1..n].mp4
for scene in os.listdir(video_directory):
    if os.path.isdir(os.path.join(video_directory, scene)):
        partial_file_path = os.path.join(video_directory, scene, "partial_movie_file_list.txt")

        if os.path.exists(partial_file_path):
            with open(partial_file_path) as f:
                for i, video in enumerate(f.read().splitlines()[1:]):
                    path, name = os.path.split(video[11:-1])

                    video_folder = "vid"
                    image_folder = "img"

                    if not os.path.exists(os.path.join(path, video_folder)):
                        os.mkdir(os.path.join(path, video_folder))

                    if not os.path.exists(os.path.join(path, image_folder)):
                        os.mkdir(os.path.join(path, image_folder))

                    original_path = os.path.join(path, name)
                    changed_path = os.path.join(path, "vid", f"{i+1}.mp4")
                    image_path = os.path.join(path, "img", f"{i+1}.png")

                    os.rename(original_path, changed_path)

                    # save the last frames
                    subprocess.Popen(["ffmpeg", "-sseof", "-3", "-i",  changed_path, "-update", "1", "-q:v", "1", "-y", image_path]).communicate()

            os.remove(partial_file_path)

